version: 2.1

orbs:
  browser-tools: circleci/browser-tools@0.1.3
  anchore: anchore/anchore-engine@1.8.4

anchors:
  run_test_aws_access: &run_test_aws_access
    run:
      name: Test AWS access
      shell: "/bin/sh -eo pipefail"
      command: |
        apk add --update aws-cli bash
        aws sts get-caller-identity

  set_env_vars: &set_env_vars
    run:  # Changed from "deploy" to "run"
      name: Set environment variables
      command: |
        account_id=$(aws sts get-caller-identity --output text --query "Account")
        region=${AWS_REGION}
        image_tag="${account_id}.dkr.ecr.${region}.amazonaws.com/eq/ruby-base-image:${CIRCLE_SHA1}"
        echo "export account_id=$account_id" >> $BASH_ENV
        echo "export region=$region" >> $BASH_ENV
        echo "export image_tag=$image_tag" >> $BASH_ENV

jobs:
  docker-build-image:
    executor: anchore/anchore_engine
    shell: "/bin/bash -eo pipefail"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - <<: *run_test_aws_access
      - <<: *set_env_vars
      - run:
          name: Build SkyMap Base Image
          command: |
            echo $image_tag
            docker build --tag $image_tag .
      - anchore/analyze_local_image:
          image_name: $image_tag
          policy_failure: False
          timeout: '500'
      - deploy:
          name: Push docker-images to ECR with latest tag management
          command: |
            aws ecr get-login-password --region ${region} | docker login -u AWS -p "$PASSWORD" $AWS_ACCOUNT_ID.dkr.ecr.${region}.amazonaws.com  # Secure password handling

            docker push "${image_tag}"

            new_image_digest=$(aws ecr describe-images --repository-name eq/ruby-base-image --image-ids imageTag="${CIRCLE_SHA1}" --query 'imageDetails[].imageDigest' --output text)
            aws ecr put-image --repository-name eq/ruby-base-image --image-tag latest --image-digest "$new_image_digest"
            aws ecr batch-delete-image --repository-name eq/ruby-base-image --image-ids imageTag=latest  # Ensure only the latest image has the "latest" tag

workflows:
  version: 2
  commit:
    jobs:
      - docker-build-image

  scheduled-workflow:
    triggers:
      - schedule:
          cron: "0 12 * * 1"
          filters:
            branches:
              only:
                - ruby-2.7.1
    jobs:
      - docker-build-image
