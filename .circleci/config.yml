version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.6
  anchore: anchore/anchore-engine@1.9.0
run_test_aws_access: &run_test_aws_access
  run:
    name: test aws access
    shell: "/bin/sh -eo pipefail"
    command: |
      apk add --update aws-cli bash
      aws sts get-caller-identity 
      `aws ecr get-login --no-include-email --region ${AWS_REGION}`
set_env_vars: &set_env_vars
  deploy:
    name: set env variables
    command: |
      account_id=$(aws sts get-caller-identity --output text --query "Account")
      region=${AWS_REGION}
      image_tag="${account_id}.dkr.ecr.${region}.amazonaws.com/eq/ruby-base-image:${CIRCLE_SHA1}"
      echo "export account_id=$account_id" >> $BASH_ENV
      echo "export region=$region" >>  $BASH_ENV
      echo "export image_tag=$image_tag" >>  $BASH_ENV

jobs:
  docker-build-image:
    executor: anchore/anchore_engine
    shell: "/bin/bash -eo pipefail"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - <<: *run_test_aws_access
      - <<: *set_env_vars
      - run:
          name: Build SkyMap Base Image
          command: |
            echo $image_tag
            docker build --tag $image_tag .
      - anchore/analyze_local_image:
          image_name: $image_tag
          policy_failure: False
          timeout: '500'
      - deploy:
          name: Push docker-images to ECR with only the commit and latest tag
          command: |
            # Declare unique_tag combining commit SHA1 and "ruby-2.7.8-latest"
            unique_tag="${CIRCLE_SHA1}-ruby-2.7.8-latest"
            image_tag="${account_id}.dkr.ecr.${region}.amazonaws.com/eq/ruby-base-image:${unique_tag}"

            # AWS ECR login
            aws ecr get-login --region ${region} --no-include-email | sh -

            # Fetch existing image digest for the unique tag
            existing_digest=$(aws ecr describe-images --repository-name eq/ruby-base-image --query "images[?imageTag=='${unique_tag}'].imageDigest" --output text --region ${region})

            # If the existing_digest is empty, the image doesn't exist, so push a new one
              if [ -z "$existing_digest" ]; then
              docker build --tag "${image_tag}" .
              docker push "${image_tag}"
            else
              # Retag existing image using Docker command
              docker tag "${account_id}.dkr.ecr.${region}.amazonaws.com/eq/ruby-base-image@${existing_digest}" "${image_tag}"

              # Push the newly tagged image
              docker push "${image_tag}"
            fi


workflows:
  version: 2
  commit:
    jobs:
      - docker-build-image

  scheduled-workflow:
    triggers:
      - schedule:
          cron: "0 12 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - docker-build-image